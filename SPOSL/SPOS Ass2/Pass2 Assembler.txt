Ass2.java

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Scanner;

public class Ass2 
{
	static Obj[] symb_table=new Obj[10];
	static Obj[] literal_table=new Obj[10];
	static int symb_found=0;
	public static void main(String[] args) throws IOException 
	{
		Scanner sc = new Scanner(System.in);
		System.out.println("ENTER TOTAL NUMBER OF SYMBOLS : ");
		int total_symb = sc.nextInt();
		int num;
		for(int i=0 ; i<total_symb; i++)
		{
			symb_table[i]=new Obj("",0);
			System.out.println("ENTER SYMBOL NAME : ");
			symb_table[i].name=sc.next();
			System.out.println("ENTER SYMBOL ADDRESS : ");
			symb_table[i].addr=sc.nextInt();
		}
		System.out.println("ENTER TOTAL NUMBER OF LITERAL");
		int total_ltr = sc.nextInt();
		for(int i=0 ; i<total_ltr; i++)
		{
			literal_table[i]=new Obj("",0);
			System.out.println("ENTER LITERAL NAME : ");
			literal_table[i].name=sc.next();
			System.out.println("ENTER LITERAL ADDRESS : ");
			literal_table[i].addr=sc.nextInt();
		}
		
		System.out.println("\n*************************************SYMBOL TABLE*************************************");
		System.out.println("\nSYMBOL\tADDRESS");
		for(int i=0;i<total_symb;i++)
			System.out.println(symb_table[i].name+"\t"+symb_table[i].addr);
		
		System.out.println("\n*************************************LITERAL TABLE*************************************");
	    System.out.println("\nIndex\tLITERAL\tADDRESS");
	    for(int i=0;i<total_ltr;i++)
	    	System.out.println((i+1) +"\t"+literal_table[i].name+"\t"+literal_table[i].addr);
	     
		BufferedReader br2=new BufferedReader(new FileReader("Output.txt"));
	 	String line;
	 	boolean symbol_error=false,undef_mnemonic=false;
	 	System.out.println("\n***********************OUTPUT FILE**************************\n\n");
	 	lab: while((line = br2.readLine())!=null)
	 	{
	 		String[] token_list=line.split("\\s+",5);
	 		symbol_error=undef_mnemonic=false;
	 		lab1: for(String token:token_list)
	 		{
	 			if(token.length()>0)
	 			{
		 			// int pos = -1;
		 			if(token.matches("---"))
		 			{
		 				System.out.print("\t---");
						undef_mnemonic=true;
		 			}
		 			else if(token.matches("[0-9]+"))
		 				System.out.print("\n\n"+token);
		 			else
		 			{
		 				String letters = token.replaceAll("[^A-Za-z]+", "");
			 			num = Integer.parseInt(token.replaceAll("[^0-9]+", ""));
			 			if(token.matches("\\([0-9]+\\)"))
			 				System.out.print("\t"+num);
			 			else
			 			{
			 				switch (letters.toUpperCase()) {
								case "S" : if(symb_table[num-1].addr==0)
											{
												System.out.print("\t---");
												symbol_error=true;
											}
											else
												System.out.print("\t"+symb_table[num-1].addr);
											break;
								case "L" : System.out.print("\t"+literal_table[num-1].addr);
									break;
								case "AD" :
											System.out.println("\n");
											continue lab;
								case "DL" :
											switch (num) 
											{
												case 1:
													System.out.println("\n");
													continue lab;
												case 2:
													System.out.println("\t 00 \t 00");
													continue lab1;
											}
								case "C" : System.out.print("\t"+num);
									break;
								default: System.out.print("\t"+"00"+num);
							}
			 			}
		 			}		 			
	 			}
	 		}
	 		if(symbol_error)	 			
	 			System.out.print("\n\n******************************SYMBOL IS NOT DEFINED******************************");
	 		if(undef_mnemonic)
	 			System.out.print("\n\n******************************INVALID MNEMONIC ******************************");
	 	}
	 	int[] flag=new int[total_symb];
	 	for(int i=0;i<total_symb;i++)
	 	{
	 		symb_found=0;
			for(int j=0;j<total_symb;j++)
				if(symb_table[i].name.equalsIgnoreCase(symb_table[j].name) && flag[j]==0)
				{
					symb_found++;
					flag[i]=flag[j]=1;
				}
			if(symb_found>1)
				System.out.print("\n\n****************************** '"+symb_table[i].name+"' IS DUPLICATE SYMBOL******************************");
	 	}
		br2.close();
		sc.close();
	}
}

Obj.java

public class Obj {
	String name;
	int addr;
	Obj(String nm, int address)
	{
		this.name=nm;
		this.addr=address;
	}
}

Pooltable.java

public class Pooltable {
int first,total_literals;
public Pooltable(int f, int l) {
	// TODO Auto-generated constructor stub
	this.first=f;
	this.total_literals=l;
}
}

Output.txt

    (AD,1) (C,100)
100 (IS,4) (RG,1) (C,05)
101 (IS,4) (RG,2) (C,10)
102 (S,1) (IS,1) (RG,1) (RG,2)
103 (IS,5) (S,2) (L,1)
104 (IS,3) (RG,1) (S,1)
105 (AD,3) (C,102)
102 (AD,5) 
102 (DL,2) (C,5)
103 (IS,5) (S,3) (L,2)
104 (IS,5) (S,4) (L,3)
105 (AD,5) 
105 (DL,2) (C,8)
106 (DL,2) (C,8)
107 (IS,5) (S,2) (L,4)
108 (IS,5) (S,3) (L,5)
109 (DL,1) (C,12)
121 (DL,2) (C,10)
122 (DL,1) (C,09)
131 (S,5) (AD,4) (S,1)
132 (AD,2) 
132 (DL,2) (C,7)
133 (DL,2) (C,8)